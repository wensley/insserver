/* Plugin Template generated by Pawn Studio */
#pragma semicolon 1
#include <sourcemod>
#pragma newdecls required

ConVar g_convar_nextlevel;

public Plugin myinfo = 
{
	name = "SM CS:GO Chinese HostName -KV",
	author = "BBS.93x.NeT",
	description = "<- Description ->",
	version = "2.9.2",
	url = "<- URL ->"
}

public void OnPluginStart()
{
	ReadHostName();
	RegAdminCmd("sm_reloadhostname",Command_ReloadHostName, ADMFLAG_ROOT);
	
	g_convar_nextlevel = FindConVar("nextlevel");
	if(g_convar_nextlevel != null)
	{
		HookConVarChange(g_convar_nextlevel, HookConVar_Changed);
	}
	else
	{
		LogError("convar nextlevel not found!! plugin not works...");
	}
	
	
}

public void HookConVar_Changed(ConVar convar, char[] oldValue, char[] newValue)
{
	if(convar == g_convar_nextlevel)
	{
		if(!StrEqual(newValue,"",false) && strlen(newValue) >= 2)
		{
			SetNextMap(newValue);
			PrintToChatAll("[SM] Next Map:\x02%s",newValue);
		}
	}
}

public Action Command_ReloadHostName(int client, int args)
{
	ReadHostName();
	return Plugin_Handled;
}


void ReadHostName()
{
	char Path[PLATFORM_MAX_PATH];
	BuildPath(Path_SM, Path, sizeof(Path), "configs/csgo_hostname.ini");
	char line[256];
	char password[128];
	if(!FileExists(Path))
	{
		LogMessage("csgo_hostname.ini file not found: %s", Path);
		return;
	}
	
	
	if(GetHostName("hostname",line,256))
	{
		TrimString(line);
		
		if(StrEqual(line, "", false))
		{
			Format(line, 256, "请设置服务器名字");
		}
		
		SetConVarString(FindConVar("hostname"), line, false, false);
	}
	else if(!GetHostName("hostname",line,256))
	{
		Handle fileHandle=OpenFile(Path,"r");
		ReadFileLine(fileHandle,line,sizeof(line));
		TrimString(line);
		
		if(StrEqual(line, "", false))
		{
			Format(line, 256, "请设置服务器名字");
		}
		
		SetConVarString(FindConVar("hostname"), line, false, false);
		CloseHandle(fileHandle);
	}
	
	
	if(Getpassword("hostname",password,128))
	{
		if (!StrEqual(password, ""))
		{
			SetConVarString(FindConVar("sv_password"), password, false, false);
		}
	}
	
	
	
	/*
	Handle fileHandle=OpenFile(Path,"r");
	ReadFileLine(fileHandle,line,sizeof(line));
	TrimString(line);
	SetConVarString(FindConVar("hostname"), line, false, false);
	CloseHandle(fileHandle);
	*/ 
}

bool GetHostName(const char[] HostName, char[] value, int maxlength)
{
	KeyValues kv = new KeyValues("ServerSet");
	char Path[PLATFORM_MAX_PATH];
	BuildPath(Path_SM, Path, sizeof(Path), "configs/csgo_hostname.ini");
	
	kv.ImportFromFile(Path);
	if (!kv.JumpToKey(HostName))
	{
		return false;
	}
	
	kv.GetString("name", value, maxlength);
	
	delete kv;
	return true;
}



bool Getpassword(const char[] HostName, char[] value, int maxlength)
{
	KeyValues kv = new KeyValues("ServerSet");
	char Path[PLATFORM_MAX_PATH];
	BuildPath(Path_SM, Path, sizeof(Path), "configs/csgo_hostname.ini");
	
	kv.ImportFromFile(Path);
	if (!kv.JumpToKey(HostName))
	{
		return false;
	}
	kv.GetString("sv_password", value, maxlength);
	
	delete kv;
	return true;
}

